package hr.ante.isms.parts;

import hr.ante.isms.connection.DatabaseConnection;
import hr.ante.isms.parts.table.ASKTable;
import hr.ante.isms.parts.table.VulnerabilityIdentASKTableModel;

import java.sql.SQLException;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.inject.Inject;

import org.eclipse.e4.ui.di.Focus;
import org.eclipse.e4.ui.di.Persist;
import org.eclipse.e4.ui.model.application.MApplication;
import org.eclipse.e4.ui.model.application.ui.MDirtyable;
import org.eclipse.e4.ui.model.application.ui.basic.MBasicFactory;
import org.eclipse.e4.ui.model.application.ui.basic.MPart;
import org.eclipse.e4.ui.model.application.ui.basic.MWindow;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;

public class VulnerabilityIdentification {

	@Inject
	MDirtyable dirty;

	private Composite mParent;

	@PostConstruct
	public void createComposite(final Composite parent) {

		final ScrolledComposite scrollBox = new ScrolledComposite(parent,
				SWT.V_SCROLL | SWT.H_SCROLL);
		scrollBox.setMinHeight(384);
		scrollBox.setMinWidth(550);

		scrollBox.setExpandHorizontal(true);
		scrollBox.setExpandVertical(true);

		mParent = new Composite(scrollBox, SWT.NONE);

		// Adds a bunch of controls here

		mParent.getShell().setText(
				"Identifikacija Ranjivosti za imovinu: --- X---");
		mParent.getShell().setSize(759, 500);
		mParent.setLayout(new GridLayout(1, false));

		Group groupPrijetnje_ = new Group(mParent, SWT.NONE);
		groupPrijetnje_.setLayout(new GridLayout(2, false));
		GridData gd_groupPrijetnje_ = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_groupPrijetnje_.horizontalIndent = 10;
		groupPrijetnje_.setLayoutData(gd_groupPrijetnje_);
		groupPrijetnje_.setBounds(10, 0, 737, 82);

		Label lblVrstaPrijet_ = new Label(groupPrijetnje_, SWT.NONE);
		GridData gd_lblVrstaPrijet_ = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_lblVrstaPrijet_.widthHint = 77;
		lblVrstaPrijet_.setLayoutData(gd_lblVrstaPrijet_);
		lblVrstaPrijet_.setText("Vrsta Prijetnje:");

		final Combo comboVrstaPrijet_ = new Combo(groupPrijetnje_, SWT.NONE);

				Label lblPrijet_ = new Label(groupPrijetnje_, SWT.NONE);
				lblPrijet_.setText("Prijetnja:");
		final Combo comboPrijet_ = new Combo(groupPrijetnje_, SWT.NONE);
		comboPrijet_.setEnabled(false);

				GridData gd_comboPrijet_ = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
				gd_comboPrijet_.widthHint = 221;
				comboPrijet_.setLayoutData(gd_comboPrijet_);

		comboVrstaPrijet_.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		comboVrstaPrijet_.setItems(getComboItemsFromDB("as_threat_type"));
		comboVrstaPrijet_.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				int index = comboVrstaPrijet_.getSelectionIndex()+1;
				comboPrijet_.setEnabled(true);
				comboPrijet_.setItems(getComboItemsFromDB("as_threat", "WHERE threattype_id LIKE '"+index+"%'",true));
			}

		});

		Group groupRanjivosti = new Group(mParent, SWT.NONE);
		groupRanjivosti.setLayout(new GridLayout(2, false));
		GridData gd_groupRanjivosti = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_groupRanjivosti.horizontalIndent = 10;
		groupRanjivosti.setLayoutData(gd_groupRanjivosti);
		groupRanjivosti.setBounds(10, 88, 737, 82);

		Label lblVrstaRanjivosti_ = new Label(groupRanjivosti, SWT.NONE);
		lblVrstaRanjivosti_.setText("Vrsta Ranjivosti:");

		final Combo comboVrstaRanjivosti_ = new Combo(groupRanjivosti, SWT.NONE);


						Label lblRanjivost_ = new Label(groupRanjivosti, SWT.NONE);
						lblRanjivost_.setText("Ranjivost:");
		final Combo comboRanjivost_ = new Combo(groupRanjivosti, SWT.NONE);
		comboRanjivost_.setEnabled(false);

				GridData gd_comboRanjivost_ = new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1);
				gd_comboRanjivost_.widthHint = 221;
				comboRanjivost_.setLayoutData(gd_comboRanjivost_);
		comboVrstaRanjivosti_.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		comboVrstaRanjivosti_.setItems(getComboItemsFromDB("as_vulnerability_type"));
		comboVrstaRanjivosti_.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				int index = comboVrstaRanjivosti_.getSelectionIndex()+1;
				comboRanjivost_.setEnabled(true);
				comboRanjivost_.setItems(getComboItemsFromDB("as_vulnerability", "WHERE vulnerabilitytype_id LIKE '"+index+"%'",true));
			}

		});

		Composite compositeASKTable = new Composite(mParent, SWT.NONE);
		GridData gd_compositeASKTable = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		gd_compositeASKTable.horizontalIndent = 10;
		gd_compositeASKTable.verticalIndent = 5;
		compositeASKTable.setLayoutData(gd_compositeASKTable);
		compositeASKTable.setLayout(new FillLayout());
		new ASKTable(compositeASKTable,new VulnerabilityIdentASKTableModel(), 717, 200);
//		new TableVulnerability(compositeASKTable, 717, 200);

		Composite compositeButtons_ = new Composite(mParent, SWT.NONE);
		compositeButtons_.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		// fd_composite.bottom = new FormAttachment(compositeButtons_, -6);
		GridLayout gl_compositeButtons_ = new GridLayout(5, false);
		gl_compositeButtons_.verticalSpacing = 0;
		compositeButtons_.setLayout(gl_compositeButtons_);

		Button btnSpremi_ = new Button(compositeButtons_, SWT.NONE);
		GridData gd_btnSpremi_ = new GridData(SWT.LEFT, SWT.CENTER, false,
				false, 1, 1);
		gd_btnSpremi_.widthHint = 100;
		btnSpremi_.setLayoutData(gd_btnSpremi_);
		btnSpremi_.setBounds(625, 324, 116, 23);
		btnSpremi_.setText("Spremi");
		btnSpremi_.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				// MWindow window = new Assets1();
				dirty.setDirty(true);

			}

		});

		Button btnKontrole_ = new Button(compositeButtons_, SWT.NONE);
		btnKontrole_.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
			}
		});
		GridData gd_Kontrole_ = new GridData(SWT.LEFT, SWT.CENTER, false,
				false, 1, 1);
		gd_Kontrole_.widthHint = 100;
		btnKontrole_.setLayoutData(gd_Kontrole_);
		btnKontrole_.setBounds(518, 324, 100, 23);
		btnKontrole_.setText("Kontrole");

		Button btnDupl_ = new Button(compositeButtons_, SWT.NONE);
		btnDupl_.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
			}
		});
		GridData gd_btnDupl_ = new GridData(SWT.LEFT, SWT.CENTER, false, false,
				1, 1);
		gd_btnDupl_.widthHint = 100;
		btnDupl_.setLayoutData(gd_btnDupl_);
		btnDupl_.setText("Dupliciraj");

		Button btnBrisi_ = new Button(compositeButtons_, SWT.NONE);
		btnBrisi_.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
			}
		});
		GridData gd_btnBrisi_ = new GridData(SWT.LEFT, SWT.CENTER, false, false,
				1, 1);
		gd_btnBrisi_.widthHint = 100;
		btnBrisi_.setLayoutData(gd_btnBrisi_);
		btnBrisi_.setText("Bri\u0161i");

		Button btnIzlaz_ = new Button(compositeButtons_, SWT.NONE);
		btnIzlaz_.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				mParent.getShell().close();
			}
		});
		GridData gd_btnIzlaz_ = new GridData(SWT.LEFT, SWT.CENTER, false, false,
				1, 1);
		gd_btnIzlaz_.widthHint = 100;
		btnIzlaz_.setLayoutData(gd_btnIzlaz_);
		btnIzlaz_.setText("Izlaz");

		scrollBox.setContent(mParent);

	}

	public String[] getComboItemsFromDB(String tableName){
		DatabaseConnection con = new DatabaseConnection();
		con.doConnection();

		try {

				return con.getComboItems(tableName);




		} catch (SQLException ex) {
			System.out.println(ex.getMessage());
			try {
				con.connection.close();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		}
		System.out.println("Connection : " + con.doConnection());
		try {
			con.connection.close();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		return new String[]{};

	}

	public String[] getComboItemsFromDB(String tableName, String whereStatement){
		DatabaseConnection con = new DatabaseConnection();
		con.doConnection();

		try {

			return con.getComboItemsWithWhere(tableName, whereStatement);

		} catch (SQLException ex) {
			System.out.println(ex.getMessage());
			try {
				con.connection.close();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		}
		System.out.println("Connection : " + con.doConnection());
		try {
			con.connection.close();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		return new String[]{};

	}

	public String[] getComboItemsFromDB(String tableName, String whereStatement, boolean valid){
		DatabaseConnection con = new DatabaseConnection();
		con.doConnection();

		try {
//			if(type=="threat")
				return con.getComboItemsThreatOrVulnerability(tableName, whereStatement);
//			if(type=="vulnerability")
//				return con.getComboItemsVulnerabilityName(tableName, whereStatement);

		} catch (SQLException ex) {
			System.out.println(ex.getMessage());
			try {
				con.connection.close();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		}
		System.out.println("Connection : " + con.doConnection());
		try {
			con.connection.close();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		return new String[]{};

	}

	@PreDestroy
	public void dispose() throws Exception {
		System.out.println("Closing application");
	}

	@Persist
	public void save() {
		System.out.println("Saving data");
		// Save the data
		// ...
		// Now set the dirty flag to false
		dirty.setDirty(false);
	}

	@Focus
	public void setFocus() {
		mParent.setFocus();
	}
}
