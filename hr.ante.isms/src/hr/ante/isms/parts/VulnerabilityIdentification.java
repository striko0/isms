package hr.ante.isms.parts;

import hr.ante.isms.connection.DatabaseConnection;
import hr.ante.isms.parts.table.ListAssetASKTableModel;
import hr.ante.isms.parts.table.ListRiskASKTableModel;
import hr.ante.isms.parts.table.NewASKTable;

import java.sql.SQLException;
import java.util.Hashtable;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.eclipse.e4.ui.di.Focus;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.wb.swt.ResourceManager;
import org.mihalis.opal.notify.Notifier;
import org.mihalis.opal.notify.NotifierColorsFactory.NotifierTheme;
import org.mihalis.opal.opalDialog.Dialog;

import de.kupzog.ktable.KTableSortedModel;

public class VulnerabilityIdentification implements ViewSelected  {

	private int action=1;
	private KTableSortedModel m_Model;
	private KTableSortedModel m_ModelRisk;
	private NewASKTable m_Table;
	private String m_Riskid;
	private int m_Row;
	private String assetName;
	private NewASKTable table;
	private Composite mParent;
	private Combo comboVrstaPrijet_;
	private Combo comboPrijet_;
	private Combo comboVrstaRanjivosti_;
	private Combo comboRanjivost_;
	private Button btnBrisi_;
	private Button btnDupl_;

	@PostConstruct
	public void createComposite(final Composite parent){

		final ScrolledComposite scrollBox = new ScrolledComposite(parent,
				SWT.V_SCROLL | SWT.H_SCROLL);
		scrollBox.setMinHeight(384);
		scrollBox.setMinWidth(550);

		scrollBox.setExpandHorizontal(true);
		scrollBox.setExpandVertical(true);

		mParent = new Composite(scrollBox, SWT.NONE);

		mParent.getShell().setSize(759, 500);

		m_ModelRisk = DataFromServer.listRiskASKTableModel;
		m_Model = DataFromServer.listAssetASKTableModel;
		m_Row = NewASKTable.clickedAssetRow;

		assetName = getDesiredColumnFromDB("as_asset", "name", "WHERE asset_id='"+m_Model.getContentAt(1, m_Row)+"'");
		mParent.getShell().setText(
				"Identifikacija ranjivosti za imovinu: "+assetName.toUpperCase()+"");
		mParent.setLayout(new GridLayout(1, false));

		Group groupPrijetnje_ = new Group(mParent, SWT.NONE);
		groupPrijetnje_.setLayout(new GridLayout(2, false));
		GridData gd_groupPrijetnje_ = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_groupPrijetnje_.horizontalIndent = 10;
		groupPrijetnje_.setLayoutData(gd_groupPrijetnje_);
		groupPrijetnje_.setBounds(10, 0, 737, 82);

		Label lblVrstaPrijet_ = new Label(groupPrijetnje_, SWT.NONE);
		GridData gd_lblVrstaPrijet_ = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_lblVrstaPrijet_.widthHint = 77;
		lblVrstaPrijet_.setLayoutData(gd_lblVrstaPrijet_);
		lblVrstaPrijet_.setText("Vrsta Prijetnje:");

		comboVrstaPrijet_ = new Combo(groupPrijetnje_, SWT.NONE);

		Label lblPrijet_ = new Label(groupPrijetnje_, SWT.NONE);
		lblPrijet_.setText("Prijetnja:");

		comboPrijet_ = new Combo(groupPrijetnje_, SWT.NONE);
		comboPrijet_.setEnabled(false);

		GridData gd_comboPrijet_ = new GridData(SWT.LEFT, SWT.CENTER, false,
				false, 1, 1);
		gd_comboPrijet_.widthHint = 221;
		comboPrijet_.setLayoutData(gd_comboPrijet_);

		comboVrstaPrijet_.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));

		Group groupRanjivosti = new Group(mParent, SWT.NONE);
		groupRanjivosti.setLayout(new GridLayout(2, false));
		GridData gd_groupRanjivosti = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_groupRanjivosti.horizontalIndent = 10;
		groupRanjivosti.setLayoutData(gd_groupRanjivosti);
		groupRanjivosti.setBounds(10, 88, 737, 82);

		Label lblVrstaRanjivosti_ = new Label(groupRanjivosti, SWT.NONE);
		lblVrstaRanjivosti_.setText("Vrsta Ranjivosti:");

		comboVrstaRanjivosti_ = new Combo(groupRanjivosti, SWT.NONE);

		Label lblRanjivost_ = new Label(groupRanjivosti, SWT.NONE);
		lblRanjivost_.setText("Ranjivost:");

		comboRanjivost_ = new Combo(groupRanjivosti, SWT.NONE);
		comboRanjivost_.setEnabled(false);

		GridData gd_comboRanjivost_ = new GridData(SWT.LEFT, SWT.CENTER, true,
				false, 1, 1);
		gd_comboRanjivost_.widthHint = 221;
		comboRanjivost_.setLayoutData(gd_comboRanjivost_);

		comboVrstaRanjivosti_.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));

		Composite compositeASKTable = new Composite(mParent, SWT.NONE);
		GridData gd_compositeASKTable = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		gd_compositeASKTable.horizontalIndent = 10;
		gd_compositeASKTable.verticalIndent = 5;
		compositeASKTable.setLayoutData(gd_compositeASKTable);
		compositeASKTable.setLayout(new FillLayout());

		table = new NewASKTable(this, compositeASKTable,new ListRiskASKTableModel(2, 3, m_Model.getContentAt(1,m_Row).toString()), 717, 200);
//		new ASKTable(compositeASKTable,new ListRiskASKTableModel(2, 3, m_Model.getContentAt(1,m_Row).toString()), 717, 200);


		Composite compositeButtons_ = new Composite(mParent, SWT.NONE);
		compositeButtons_.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		// fd_composite.bottom = new FormAttachment(compositeButtons_, -6);
		GridLayout gl_compositeButtons_ = new GridLayout(4, false);
		gl_compositeButtons_.verticalSpacing = 0;
		compositeButtons_.setLayout(gl_compositeButtons_);

		Button btnSpremi_ = new Button(compositeButtons_, SWT.NONE);
		GridData gd_btnSpremi_ = new GridData(SWT.LEFT, SWT.CENTER, false,
				false, 1, 1);
		gd_btnSpremi_.widthHint = 100;
		btnSpremi_.setLayoutData(gd_btnSpremi_);
		btnSpremi_.setBounds(625, 324, 116, 23);
		btnSpremi_.setText("Spremi");
		btnSpremi_.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				saveAction();
				action=2;
			}
		});

		btnDupl_ = new Button(compositeButtons_, SWT.NONE);
		btnDupl_.setEnabled(false);
		GridData gd_btnDupl_ = new GridData(SWT.LEFT, SWT.CENTER, false, false,
				1, 1);
		gd_btnDupl_.widthHint = 100;
		btnDupl_.setLayoutData(gd_btnDupl_);
		btnDupl_.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				if(action==2){
					action=1;
					saveAction();

				}
			}
		});
		btnDupl_.setText("Dupliciraj");

		btnBrisi_ = new Button(compositeButtons_, SWT.NONE);
		btnBrisi_.setEnabled(false);
		GridData gd_btnBrisi_ = new GridData(SWT.LEFT, SWT.CENTER, false, false,
				1, 1);
		gd_btnBrisi_.widthHint = 100;
		btnBrisi_.setLayoutData(gd_btnBrisi_);
		btnBrisi_.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				boolean confirm = Dialog.isConfirmed("Je ste li sigurni da želite obrisati podatak?", "Podatak æe biti obrisan");

				if (confirm) {
					try {
						deleteDataFromDB("as_risk", "risk_id", m_Riskid);
						refreshTable();

					} catch (Exception e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
			}
		});
		btnBrisi_.setText("Bri\u0161i");

		Button btnIzlaz_ = new Button(compositeButtons_, SWT.NONE);
		btnIzlaz_.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				mParent.getShell().close();
			}
		});
		GridData gd_btnIzlaz_ = new GridData(SWT.LEFT, SWT.CENTER, false, false,
				1, 1);
		gd_btnIzlaz_.widthHint = 100;
		btnIzlaz_.setLayoutData(gd_btnIzlaz_);
		btnIzlaz_.setText("Izlaz");

		fillForm();
		scrollBox.setContent(mParent);

	}

	public void refreshTable(){
		((ListAssetASKTableModel)m_Model).readAllFromDB();
		((ListRiskASKTableModel)table.getModel()).readAllFromDB();
		((ListRiskASKTableModel) m_ModelRisk).readAllFromDB();
		table.redraw();
	}

	private void fillForm() {
		// TODO Auto-generated method stub

		/**
		 * Dohvaæanje iz baze
		 *
		 */
		action=1;
		comboPrijet_.setEnabled(false);
		comboRanjivost_.setEnabled(false);
		comboVrstaPrijet_.setItems(getComboItemsFromDB("as_threat_type"));
		comboVrstaPrijet_.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				int index = comboVrstaPrijet_.getSelectionIndex()+1;
				comboPrijet_.setEnabled(true);
				comboPrijet_.setItems(getComboItemsFromDB("as_threat", "WHERE threattype_id LIKE '"+index+"%'",true));
			}

		});



		comboVrstaRanjivosti_.setItems(getComboItemsFromDB("as_vulnerability_type"));
		comboVrstaRanjivosti_.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				int index = comboVrstaRanjivosti_.getSelectionIndex()+1;
				comboRanjivost_.setEnabled(true);
				comboRanjivost_.setItems(getComboItemsFromDB("as_vulnerability", "WHERE vulnerabilitytype_id LIKE '"+index+"%'",true));
			}

		});

		comboVrstaPrijet_.setText("");
		comboPrijet_.setText("");
		comboVrstaRanjivosti_.setText("");
		comboRanjivost_.setText("");
		table.m_Selection.clear();



	}

	@Override
	public void rowSelected(int row) {
		// TODO Auto-generated method stub
		if (row!=0 && table.getModel().getContentAt(1, row).toString()!="") {
			action=2;
			btnBrisi_.setEnabled(true);
			btnDupl_.setEnabled(true);
			m_Riskid=table.getModel().getContentAt(5, row).toString();
			comboPrijet_.setEnabled(true);
			comboRanjivost_.setEnabled(true);

			String vulnerabilityId = table.getModel().getContentAt(3, row)
					.toString();
			String threatId = table.getModel().getContentAt(4, row).toString();

			String threat = table.getModel().getContentAt(1, row).toString();

			String threattypeId = getDesiredColumnFromDB("view_threat",
					"threattype_id", "WHERE threat_id=" + threatId + "");

			comboVrstaPrijet_.setItems(getComboItemsFromDB("as_threat_type"));
			comboPrijet_.setItems(getComboItemsFromDB("as_threat",
					"WHERE threattype_id=" + threattypeId + "", true));

			comboPrijet_.setText(threatId + "-" + threat);
			comboVrstaPrijet_.setText(threattypeId
					+ "-"
					+ getDesiredColumnFromDB("view_threat", "threat_type",
							"WHERE threat_id=" + threatId + ""));

			comboVrstaRanjivosti_
			.setItems(getComboItemsFromDB("as_vulnerability_type"));
			if (!vulnerabilityId.equals("0") && vulnerabilityId.length() > 0) {

					String vulnerability = table.getModel().getContentAt(2, row)
							.toString();
					String vulnerabilitytypeId = getDesiredColumnFromDB(
						"as_vulnerability", "vulnerabilitytype_id",
						"WHERE vulnerability_id=" + vulnerabilityId + "");

					comboRanjivost_.setItems(getComboItemsFromDB(
							"as_vulnerability", "WHERE vulnerabilitytype_id="
									+ vulnerabilitytypeId + "", true));
					comboRanjivost_.setText(vulnerabilityId + "-" + vulnerability);
					comboVrstaRanjivosti_.setText(vulnerabilitytypeId
							+ "-"
							+ getDesiredColumnFromDB("view_vulnerability",
									"vulnerability_type", "WHERE vulnerability_id="
											+ vulnerabilityId + ""));



			}
			else
			{
				comboRanjivost_.setText("");
				comboRanjivost_.setEnabled(false);
			}

		}
		else
		{
			fillForm();
		}

	}

	public void saveAction(){
		if(comboPrijet_.getText()!="" && comboPrijet_.getText().length()>0 && comboVrstaPrijet_.getText()!="" && comboVrstaPrijet_.getText().length()>0 && comboVrstaRanjivosti_.getText()!="" && comboVrstaRanjivosti_.getText().length()>0 && comboRanjivost_.getText()!="" && comboRanjivost_.getText().length()>0){
			Hashtable<String, String> data = new Hashtable<String, String>();

			String temp = comboPrijet_.getText();
			int t = temp.indexOf("-");
			data.put("threat_id",getDesiredColumnFromDB("as_threat", "threat_id","WHERE name='"+ comboPrijet_.getText().substring(t+1) + "'"));
			temp=comboRanjivost_.getText();
			t = temp.indexOf("-");
			data.put("vulnerability_id",getDesiredColumnFromDB("as_vulnerability", "vulnerability_id","WHERE name='"+ comboRanjivost_.getText().substring(t+1) + "'"));
			data.put("asset_id", m_Model.getContentAt(1, m_Row).toString());
			data.put("name", m_Model.getContentAt(2, m_Row).toString());
			data.put("assetsubcateg_id", m_Model.getContentAt(3, m_Row).toString());
			data.put("owner", m_Model.getContentAt(4, m_Row).toString());
			data.put("asset_value", m_Model.getContentAt(9, m_Row).toString());
			data.put("confidentiality_level",m_Model.getContentAt(5, m_Row).toString());
			data.put("integrity_level", m_Model.getContentAt(6, m_Row).toString());
			data.put("accessibility_level",	m_Model.getContentAt(7, m_Row).toString());
			data.put("businessimpact_level",m_Model.getContentAt(8, m_Row).toString());

			System.out.println("Hashtable" + data);
			try {

				if (action == 2) {
					insertDataInDB("as_risk", data, "update", m_Riskid);

				} else
					insertDataInDB("as_risk", data, "insert", "");


			} catch (Exception e1) {
				e1.printStackTrace();

			}
			Notifier.notify(ResourceManager.getPluginImage("hr.ante.isms",
					"src/icons/tick.png"),"Spremanje uspješno", "Podaci su spremljeni", NotifierTheme.GREEN_THEME);

		}

		else
			Notifier.notify(ResourceManager.getPluginImage("hr.ante.isms",
					"src/icons/error.ico"),"Nemože se spremiti", "Niste unijeli sve potrebno podatke", NotifierTheme.RED_THEME);
		refreshTable();
		fillForm();
	}

	public String[] getComboItemsFromDB(String tableName) {
		DatabaseConnection con = new DatabaseConnection();
		con.doConnection();

		try {

			return con.getComboItems(tableName);

		} catch (SQLException ex) {
			System.out.println(ex.getMessage());
			try {
				con.connection.close();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		}
		System.out.println("Connection : " + con.doConnection());
		try {
			con.connection.close();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		return new String[] {};

	}

	public String[] getComboItemsFromDB(String tableName, String whereStatement) {
		DatabaseConnection con = new DatabaseConnection();
		con.doConnection();

		try {

			return con.getComboItemsWithWhere(tableName, whereStatement);

		} catch (SQLException ex) {
			System.out.println(ex.getMessage());
			try {
				con.connection.close();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		}
		System.out.println("Connection : " + con.doConnection());
		try {
			con.connection.close();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		return new String[] {};

	}

	public String[] getComboItemsFromDB(String tableName,
			String whereStatement, boolean valid) {
		DatabaseConnection con = new DatabaseConnection();
		con.doConnection();

		try {
			// if(type=="threat")
			return con.getComboItemsThreatOrVulnerability(tableName,
					whereStatement);

		} catch (SQLException ex) {
			System.out.println(ex.getMessage());
			try {
				con.connection.close();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		}
		System.out.println("Connection : " + con.doConnection());
		try {
			con.connection.close();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		return new String[] {};

	}

	public void insertDataInDB(String tableName, Hashtable data, String updateOrInsert, String id) throws Exception{
		DatabaseConnection con = new DatabaseConnection();
		con.doConnection();

		try {

			if(updateOrInsert=="insert")
				con.insertVulnerabilityIdentData(tableName, data);
			if(updateOrInsert=="update")
				con.updateVulnerabilityIdentData(tableName, data, id);

		} catch (SQLException ex) {
			System.out.println(ex.getMessage());
			try {
				con.connection.close();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		}
		System.out.println("Connection : " + con.doConnection());
		try {
			con.connection.close();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}



	}

	public void deleteDataFromDB(String tableName, String idField, String id) throws Exception{
		DatabaseConnection con = new DatabaseConnection();
		con.doConnection();

		try {

			con.deleteData(tableName,idField, id);

		} catch (SQLException ex) {
			System.out.println(ex.getMessage());
			try {
				con.connection.close();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		}
		System.out.println("Connection : " + con.doConnection());
		try {
			con.connection.close();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}



	}

	public String getDesiredColumnFromDB(String tableName, String columnName, String whereStatement){
		DatabaseConnection con = new DatabaseConnection();
		con.doConnection();

		try {

			return con.getContentFromDesiredColumn(tableName, columnName, whereStatement);

		} catch (SQLException ex) {
			System.out.println(ex.getMessage());
			try {
				con.connection.close();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		}
		System.out.println("Connection : " + con.doConnection());
		try {
			con.connection.close();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		return new String();

	}

	@PreDestroy
	public void dispose() throws Exception {
		System.out.println("Closing application");
	}

	@Focus
	public void setFocus() {
		mParent.setFocus();
	}


}
