package hr.ante.isms.parts;

import hr.ante.isms.connection.DataFromDatabase;
import hr.ante.isms.parts.table.ListVulnerabilityASKTableModel;
import hr.ante.isms.parts.table.NewASKTable;

import java.util.Hashtable;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.inject.Inject;

import org.eclipse.e4.ui.di.Focus;
import org.eclipse.e4.ui.model.application.MApplication;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.wb.swt.ResourceManager;
import org.mihalis.opal.notify.Notifier;
import org.mihalis.opal.notify.NotifierColorsFactory.NotifierTheme;
import org.mihalis.opal.opalDialog.Dialog;

import de.kupzog.ktable.KTableSortedModel;

public class Vulnerability implements ViewSelected{

	private int action=1;
	private KTableSortedModel m_Model;
	private String m_VulnerabilityId;
	private NewASKTable table;
	private int m_Row;
	private DataFromDatabase dB;

	private Composite mParent;
	private Combo comboVrsta_;
	private Combo comboPosljedica_;

	@Inject

	private MApplication app;
	private Text textNaziv_;
	private Text textOpis_;
	private Text textPrimjerPrijetnje_;
	private Button btnRadAkt_;
	private Button btnRadPlan_;
	private Button btnRadNeplan_;
	private Button btnBrisi_;
	private Button btnDupliciraj_ ;
	private Button btnNovo_;
	private int radioButton;

	private String vulnerabilityTypeId;

	@PostConstruct
	public void createComposite(final Composite parent) {

		final ScrolledComposite scrollBox = new ScrolledComposite(parent,
				SWT.V_SCROLL | SWT.H_SCROLL);
		scrollBox.setLocation(0, 0);
		scrollBox.setMinHeight(450);
		scrollBox.setMinWidth(700);

		scrollBox.setExpandHorizontal(true);
		scrollBox.setExpandVertical(true);

		mParent = new Composite(scrollBox, SWT.NONE);

		m_Model = DataFromServer.listVulnerabilityASKTableModel;
		m_Row = NewASKTable.clickedVulnerabilityRow;
		dB = new DataFromDatabase();

		mParent.getShell().setText("Evidencija Ranjivosti");
		mParent.setLayout(new GridLayout(1, false));

		Composite composite1 = new Composite(mParent, SWT.NONE);
		composite1.setLayout(new GridLayout(4, false));
		GridData gd_composite1 = new GridData(SWT.FILL, SWT.FILL, true, true,
				2, 1);
		gd_composite1.heightHint = 162;
		composite1.setLayoutData(gd_composite1);

		Label lblNaziv_ = new Label(composite1, SWT.NONE);
		lblNaziv_.setText("Naziv:");

		textNaziv_ = new Text(composite1, SWT.BORDER);
		textNaziv_.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true,
				false, 3, 1));

		Label lblVrsta_ = new Label(composite1, SWT.NONE);
		lblVrsta_.setText("Vrsta:");

		comboVrsta_ = new Combo(composite1, SWT.READ_ONLY);
		GridData gd_comboVrsta_ = new GridData(SWT.LEFT, SWT.CENTER, true,
				false, 1, 1);
		gd_comboVrsta_.widthHint = 190;
		comboVrsta_.setLayoutData(gd_comboVrsta_);

		new Label(composite1, SWT.NONE);
		new Label(composite1, SWT.NONE);

		Label lblOpis_ = new Label(composite1, SWT.NONE);
		lblOpis_.setText("Opis:");
		new Label(composite1, SWT.NONE);
		new Label(composite1, SWT.NONE);
		new Label(composite1, SWT.NONE);

		textOpis_ = new Text(composite1, SWT.BORDER | SWT.WRAP | SWT.V_SCROLL);
		GridData gd_textOpis_ = new GridData(SWT.FILL, SWT.FILL, true, true, 4, 2);
		gd_textOpis_.heightHint = 10;
		textOpis_.setLayoutData(gd_textOpis_);

		Label lblPosljedica_ = new Label(composite1, SWT.NONE);
		lblPosljedica_.setText("Posljedica:");
		lblPosljedica_.setBounds(0, 0, 32, 15);

		comboPosljedica_ = new Combo(composite1, SWT.READ_ONLY);
		GridData gd_comboPosljedica_ = new GridData(SWT.LEFT, SWT.CENTER,
				false, false, 1, 1);
		gd_comboPosljedica_.widthHint = 139;
		comboPosljedica_.setLayoutData(gd_comboPosljedica_);

		new Label(composite1, SWT.NONE);
		new Label(composite1, SWT.NONE);

		Label lblPrimjerPrijetnje_ = new Label(composite1, SWT.NONE);
		lblPrimjerPrijetnje_.setText("Primjer Prijetnje:");
		new Label(composite1, SWT.NONE);
		new Label(composite1, SWT.NONE);
		new Label(composite1, SWT.NONE);

		textPrimjerPrijetnje_ = new Text(composite1, SWT.BORDER | SWT.WRAP | SWT.V_SCROLL);
		GridData gd_textPrimjerPrijetnje_ = new GridData(SWT.FILL, SWT.FILL, true, true, 4, 2);
		gd_textPrimjerPrijetnje_.heightHint = 10;
		textPrimjerPrijetnje_.setLayoutData(gd_textPrimjerPrijetnje_);

		Group grpStatus_ = new Group(composite1, SWT.NONE);
		grpStatus_.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false,
				false, 2, 1));
		grpStatus_.setText("Status");
		grpStatus_.setLayout(new GridLayout(3, false));

		btnRadAkt_ = new Button(grpStatus_, SWT.RADIO);
		btnRadAkt_.setText("Aktivno");

		btnRadPlan_ = new Button(grpStatus_, SWT.RADIO);
		btnRadPlan_.setText("Planirano");

		btnRadNeplan_ = new Button(grpStatus_, SWT.RADIO);
		btnRadNeplan_.setSelection(true);
		btnRadNeplan_.setText("Neplanirano");
		new Label(composite1, SWT.NONE);
		new Label(composite1, SWT.NONE);

		Composite compositeASKTable = new Composite(mParent, SWT.NONE);
		compositeASKTable.setLayout(new FillLayout(SWT.HORIZONTAL));
		GridData gd_compositeASKTable = new GridData(SWT.FILL, SWT.FILL, true,
				true, 2, 1);
		gd_compositeASKTable.heightHint = 31;
		compositeASKTable.setLayoutData(gd_compositeASKTable);

		table = new NewASKTable(this,compositeASKTable, new ListVulnerabilityASKTableModel(),
				717, compositeASKTable.getBounds().height);

//		new ASKTable(compositeASKTtable, new VulnerabilityASKTableModel(), 717,
//				compositeASKTtable.getBounds().height);
		// new Label(mParent, SWT.NONE);

		Composite compositeButtons_ = new Composite(mParent, SWT.NONE);
		GridData gd_compositeButtons_ = new GridData(SWT.RIGHT, SWT.FILL, true,
				false, 2, 1);
		gd_compositeButtons_.heightHint = 42;
		gd_compositeButtons_.horizontalIndent = 10;
		gd_compositeButtons_.widthHint = 641;
		compositeButtons_.setLayoutData(gd_compositeButtons_);
		compositeButtons_.setLayout(new GridLayout(6, false));

		Button btnSpremi_ = new Button(compositeButtons_, SWT.NONE);
		GridData gd_btnSpremi_ = new GridData(SWT.LEFT, SWT.CENTER, false,
				false, 1, 1);
		gd_btnSpremi_.widthHint = 100;
		btnSpremi_.setLayoutData(gd_btnSpremi_);
		btnSpremi_.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				saveAction();
				action=2;
			}
		});
		btnSpremi_.setText("Spremi");

		btnNovo_ = new Button(compositeButtons_, SWT.NONE);
		GridData gd_btnNovo_ = new GridData(SWT.LEFT, SWT.CENTER, false, false,
				1, 1);
		gd_btnNovo_.widthHint = 100;
		btnNovo_.setLayoutData(gd_btnNovo_);
		btnNovo_.setEnabled(false);
		btnNovo_.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				table.m_Selection.clear();
				m_VulnerabilityId=null;
				fillForm();
			}
		});
		btnNovo_.setText("Novo");

		btnDupliciraj_ = new Button(compositeButtons_, SWT.NONE);
		btnDupliciraj_.setEnabled(false);
		GridData gd_btnDupliciraj_ = new GridData(SWT.LEFT, SWT.CENTER, false,
				false, 1, 1);
		gd_btnDupliciraj_.widthHint = 100;
		btnDupliciraj_.setLayoutData(gd_btnDupliciraj_);
		btnDupliciraj_.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(action==2){
					action=1;
					saveAction();

				}
			}
		});
		btnDupliciraj_.setText("Dupliciraj");

		btnBrisi_ = new Button(compositeButtons_, SWT.NONE);
		GridData gd_btnBrisi_ = new GridData(SWT.LEFT, SWT.CENTER, false,
				false, 1, 1);
		gd_btnBrisi_.widthHint = 100;
		btnBrisi_.setEnabled(false);
		btnBrisi_.setLayoutData(gd_btnBrisi_);
		btnBrisi_.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				boolean confirm = Dialog.isConfirmed("Je ste li sigurni da želite obrisati podatak?", "Podatak æe biti obrisan");

				if (confirm) {
					try {
						dB.deleteDataFromDB("as_vulnerability", "vulnerability_id", m_VulnerabilityId);
						refreshTable();

					} catch (Exception e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}

			}
		});
		btnBrisi_.setText("Briši");

		Button btnIzlaz_ = new Button(compositeButtons_, SWT.NONE);
		GridData gd_btnIzlaz_ = new GridData(SWT.LEFT, SWT.CENTER, false,
				false, 1, 1);
		gd_btnIzlaz_.widthHint = 100;
		btnIzlaz_.setLayoutData(gd_btnIzlaz_);
		btnIzlaz_.setText("Izlaz");
		btnIzlaz_.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				mParent.getShell().close();
			}
		});

		Button btnIspis_ = new Button(compositeButtons_, SWT.NONE);
		btnIspis_.setText("Ispis");
		GridData gd_btnIspis_ = new GridData(SWT.LEFT, SWT.CENTER, false,
				false, 1, 1);
		gd_btnIspis_.widthHint = 100;
		btnIspis_.setLayoutData(gd_btnIspis_);

		fillForm();
		scrollBox.setContent(mParent);

	}

	public void refreshTable(){
		((ListVulnerabilityASKTableModel)table.getModel()).readAllFromDB();
		table.redraw();
	}

	private void fillForm() {
		// TODO Auto-generated method stub

		/**
		 * Poèetno postavljanje controla
		 *
		 */
		action=1;
		comboVrsta_.setItems(dB.getComboItemsFromDB("as_vulnerability_type"));
		comboPosljedica_.setItems(dB.getComboItemsFromDB("as_vulnerability_level"));

		textNaziv_.setText("");
		textOpis_.setText("");
		textPrimjerPrijetnje_.setText("");
		comboVrsta_.setText("");
		comboPosljedica_.setText("");
		btnRadAkt_.setSelection(false);
		btnRadPlan_.setSelection(false);
		btnRadNeplan_.setSelection(true);

		table.m_Selection.clear();


	}

	@Override
	public void rowSelected(int row) {
		// TODO Auto-generated method stub
		if (row!=0 && !table.getModel().getContentAt(1, row).toString().equals("")) {
			action=2;
			btnBrisi_.setEnabled(true);
			btnDupliciraj_.setEnabled(true);
			btnNovo_.setEnabled(true);
			m_VulnerabilityId=table.getModel().getContentAt(4, row).toString();

			textNaziv_.setText(table.getModel().getContentAt(1, row).toString());

			String vulnerabilityType =  table.getModel().getContentAt(2, row).toString();
			vulnerabilityTypeId =  dB.getDesiredColumnFromDB("view_vulnerability",
					"vulnerabilitytype_id", "WHERE vulnerability_id='" + m_VulnerabilityId + "'");

			String description = table.getModel().getContentAt(5, row).toString();
			if(description!="")
				textOpis_.setText(description);
			else
				textOpis_.setText("");

			String vulnerabilityLevel =  table.getModel().getContentAt(3, row).toString();
			String vulnerabilityLevelId =  dB.getDesiredColumnFromDB("view_vulnerability",
					"vulnerability_level", "WHERE vulnerability_id='" + m_VulnerabilityId + "'");

			String example = table.getModel().getContentAt(7, row).toString();
			if(example!="")
				textPrimjerPrijetnje_.setText(example);
			else
				textPrimjerPrijetnje_.setText("");

			radioButton = Integer.parseInt(table.getModel().getContentAt(8, row).toString());
			switch (radioButton) {
			case 1:
				btnRadAkt_.setSelection(true);
				btnRadPlan_.setSelection(false);
				btnRadNeplan_.setSelection(false);
				break;
			case 2:
				btnRadAkt_.setSelection(false);
				btnRadPlan_.setSelection(true);
				btnRadNeplan_.setSelection(false);
				break;
			case 3:
				btnRadAkt_.setSelection(false);
				btnRadPlan_.setSelection(false);
				btnRadNeplan_.setSelection(true);
				break;

			default:
				break;
			}

			comboVrsta_.setText(vulnerabilityTypeId + "-" + vulnerabilityType);
			comboPosljedica_.setText(vulnerabilityLevelId + "-" + vulnerabilityLevel);


		}
		else
		{
			fillForm();
		}
	}

	public void saveAction(){
		if((textNaziv_.getText()!="" && textNaziv_.getText().length()>0 )
				&& (comboVrsta_.getText()!="" && comboVrsta_.getText().length()>0)
				&& (comboPosljedica_.getText()!="" && comboPosljedica_.getText().length()>0)

				){
			Hashtable<String, String> data = new Hashtable<String, String>();

			String temp = comboVrsta_.getText();
			int t = temp.indexOf("-");
			data.put("vulnerabilitytype_id",comboVrsta_.getText().substring(0,t));
			data.put("name",textNaziv_.getText());
			if(!textOpis_.getText().equals("")){
				data.put("description",textOpis_.getText());
			}
			int radio = getRadioButtonSelection();
			switch (radio) {
			case 1:
				data.put("active", 1+"");
				break;
			case 2:
				data.put("active", 2+"");
				break;
			case 3:
				data.put("active", 3+"");
				break;

			default:
				break;
			}
			temp = comboPosljedica_.getText();
			t = temp.indexOf("-");
			data.put("vulnerability_level", comboPosljedica_.getText().substring(0,t));

			if(textPrimjerPrijetnje_.getText().equals("")){
				data.put("example",textPrimjerPrijetnje_.getText());
			}
			System.out.println("Hashtable" + data);
			try {

				if (action == 2) {
					dB.insertDataInDB("as_vulnerability", data, "update","Vulnerability", m_VulnerabilityId);

				} else
					dB.insertDataInDB("as_vulnerability", data, "insert","Vulnerability", "");


			} catch (Exception e1) {
				e1.printStackTrace();

			}
			Notifier.notify(ResourceManager.getPluginImage("hr.ante.isms",
					"src/icons/tick.png"),"Spremanje uspješno", "Podaci su spremljeni", NotifierTheme.GREEN_THEME);

		}

		else
			Notifier.notify(ResourceManager.getPluginImage("hr.ante.isms",
					"src/icons/error.ico"),"Nemože se spremiti", "Niste unijeli sve potrebno podatke", NotifierTheme.RED_THEME);
		refreshTable();
		fillForm();
	}



	private int getRadioButtonSelection() {
		// TODO Auto-generated method stub
		if(btnRadAkt_.getSelection()==true)
			return 1;
		if(btnRadPlan_.getSelection()==true)
			return 1;
		if(btnRadAkt_.getSelection()==true)
			return 2;
		else
			return 3;
	}

	@PreDestroy
	public void dispose() throws Exception {
		System.out.println("Closing application");
	}

	@Focus
	public void setFocus() {
		mParent.setFocus();
	}

}
